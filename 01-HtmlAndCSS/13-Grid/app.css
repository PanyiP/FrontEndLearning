/*
 Container:
   display: grid; or inline-grid -> this cases the grid to act as an inline element
   grid-template-columns: 50px 1fr 150px; -> Define columns -> fr stands for fractions
   grid-template-rows: 1fr 1fr 2fr; -> Define rows
   grid-template: 1fr 1fr / 1fr 3fr 1fr ;
                    rows      columns
   grid-template-areas: 
   grid-template-columns: minmax(100px, 1fr); -> Defines a minimum and maximum value for the width a column should span or the height a row should span.
                        keywords: min-content, max-content, auto
   grid-template-rows: repeat(3, 1fr); -> Repeats 1fr 3 times.
   grid-template-rows: fit-content(50px); -> Tells a Grid Track to be as wide/tall as its content, but with the max value that it should not exceed.
   column-gap: 16px; -> Defines the gap between each rows.
   row-gap: 24px; -> Defines the gap between each columns.
   gap: 16px; gap: 16px 24px; -> Shorthand for row-gap and column-gap.
   grid-template-areas: "a a c" "b b c"; -> Create named blocks in the grid.
   grid-auto-flow: Use it to tell the grid how/where to add new items in the grid. The default is row.
   grid-auto-rows, grid-auto-columns: 200px; -> Set height and width to all new elements that the container grid is not prepared for.
   auti-fit, auto-fill: responsiveness for grids
     grid-template-columns: repeat(auto-fill, minmax(100px, 1fr)); -> If the grid container have a specific width then the browser can decide how many columns it shows.
          auto-fill: If there is no item to fill empty space it leaves empty space inside the container.
     grid-template-columns: repeat(auto-fit, minmax(100px, 1fr)); -> If the grid container have a specific width then the browser can decide how many columns it shows.
          auto-fit -> Makes all the elements grow to fit the available space of the container. No extra place left.

Items:
  grid-column-start: 1; -> The grid item should start at column line 1
  grid-column-end: 3; -> and spans columns until line 3.
  grid-row-start: 2; -> The grid item should start at row line 2
  grid-row-end: 3; -> and spans rows until line 3.
  grid-row-end: span 2; -> From the starting line this item should span 2 columns.
  grid-column: 1 / 3; -> Short for grid-column-start and grid-column-end. Same true for row.
  grid-areas: 2 / 1 / 2 / 4; -> row-start / column-start / row-end / column-end.
  grid-area: a; -> Assign item to a named block.
*/

.container {
   height: 700px;
   width: 1000px;
   margin: 100px auto;
   background-color: black;
   box-shadow: 0 6px 20px rgb(0 0 0 / 0.2);

   display: grid;
   grid-template-columns: [col1-start] 1fr [col1-end col2-start] 2fr [col2-end col3-start] 2fr [col3-end col4-start] 1fr [col4-end];
   grid-template-rows: 100px 3fr 100px;
   gap: 16px 32px;
 }
 
 .box {
   color: white;
   font-size: 1.5rem;
   text-align: center;
 }

 .row-span {
  grid-row-start: 1;
  grid-column-start: col2-start;
  grid-column-end: 4;
 }

 .column-span {
  grid-column-start: 4;
  grid-row-start: 1;
  grid-row-end: span 2;
  /* grid-row-end: 3; */
 }




 .container-areas {
  height: 700px;
  width: 1000px;
  margin: 100px auto;
  background-color: black;
  box-shadow: 0 6px 20px rgb(0 0 0 / 0.2);

  display: grid;
  grid-template-columns: repeat(4, 1fr);
  grid-template-rows: repeat(4, 1fr);
  gap: 8px;
  grid-template-areas:
    "a a a c"
    "b b . c"
    "b b . c"
    ". d d .";
}

.box-area-a {
  color: white;
  font-size: 1.5rem;
  text-align: center;

  grid-area: a;
}

.box-area-b {
  color: white;
  font-size: 1.5rem;
  text-align: center;

  grid-area: b;
}

.box-area-c {
  color: white;
  font-size: 1.5rem;
  text-align: center;

  grid-area: c;
}

.box-area-d {
  color: white;
  font-size: 1.5rem;
  text-align: center;

  grid-area: d;
}
 